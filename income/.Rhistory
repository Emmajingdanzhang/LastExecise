Data[num.cols] = lapply(Data[num.cols],as.numeric)
usa <- map_data("usa")
usa$Longitude=as.numeric(usa$long)
usa$Latitude=as.numeric(usa$lat)
gg1=ggplot(usa) + geom_polygon(data = usa, aes(x=Longitude, y =Latitude,group=group)) +
coord_fixed(1.4)
Data$Longitude=as.numeric(Data$long)
Data$Latitude=as.numeric(Data$lat)
State_=sprintf("%s: ",as.character(Data$State))
Value_=sprintf("%f",Data$Value)
Data$labs<- paste0(State_,Value_)
map_pre=gg1 + geom_point(data = Data, aes(x=Longitude, y =Latitude,text = paste(labs, "inches")),color = "pink", size = (Data$Value/15))+ scale_y_continuous(limits =c(25,50)) + scale_x_continuous(limits =c(-130,-60))
map_pre
map_pre
data("housing", package="MASS")
housing
str(housing)
head(housing)
housing$Infl=odered(housing$Infl)
housing$Infl=ordered(housing$Infl)
library(VGAM)
install.packages("VGAM")
library(VGAM)
housing$Type=ordered(housing$Type)
viet1 = vglm(Type~Infl+Cont,family=cumulative(parallel = TRUE), data = housing)
viet1
type.polr <- polr(Type~Infl+Cont, data = housing)
summary(type.polr)
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
library(MASS
library(MASS)
type.polr <- polr(Type~Infl+Cont, data = housing)
library(MASS)
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
library(VGAM)
library(MASS)
require(MASS)
install.dates('MASS', Sys.Date() - 30)
install.dates("MASS", Sys.Date() - 30)
install.packages(MASS, repos=NULL, type="source")
install.packages("MASS", repos=NULL, type="source")
data("housing", package="MASS")
data("housing", package="MASS")
housing
data("housing", package="MASS")
housing
str(housing)
head(housing)
require(MASS)
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
install.packages("installr")
library(installr)
updateR()
install.packages("vcdExtra")
library(vcdExtra)
data("housing", package="MASS")
#housing
str(housing)
head(housing)
housing$Type=ordered(housing$Type)
type.polr <- polr(Type~Infl+Cont+Freq, data = housing)
summary(type.polr)
install.packages("car")
library(car)
Anova(type.polr)
install.packages("MASS")
install.packages("MASS")
(.packages())
install.packages("lme4")
install.packages("lme4")
install.packages("lme4")
install.packages("MASS")
install.packages("MASS")
library(MASS)
data("housing", package="MASS")
#housing
str(housing)
head(housing)
housing$Type=ordered(housing$Type)
type.polr <- polr(Type~Infl+Cont+Freq, data = housing)
summary(type.polr)
library(car)
Anova(type.polr)
install.packages("VGAM")
library(VGAM)
PO.mod = vglm(Type~Infl+Cont, data = housing, weights = Freq, family = cumulative(parallel = TRUE))
NPO.mod = vglm(Type~Infl+Cont, data = housing, weights = Freq, family = cumulative(parallel = TRUE))
lrtest(PO.mod, NPO.mod)
install.packages(effects)
install.packages("effects")
library(effects)
plot(Effect(c("Infl","Infl"), type.polr))
plot(Effect(c("Infl","Type"), type.polr))
plot(Effect("Infl", type.polr))
plot(Effect("Type", type.polr))
housing$Type
housing$Infl
plot(Effect("Infl", type.polr), style= "stacked", key.args= list(x= .55, y= .9))
plot(Effect(c("Infl","Type"), type.polr))
data("housing", package="MASS")
#housing
str(housing)
head(housing)
housing$Type=ordered(housing$Type)
type.polr <- polr(Type~Infl+Cont, data = housing)
summary(type.polr)
data("housing", package="MASS")
#housing
str(housing)
head(housing)
housing$Type=ordered(housing$Type)
type.polr <- polr(Sat ~ Infl + Type + Cont, weights = Fre, data = housing)
summary(type.polr)
type.polr <- polr(Sat ~ Infl + Type + Cont, weights = Freq, data = housing)
summary(type.polr)
Anova(type.polr)
PO.mod = vglm(Sat ~ Infl + Type + Cont, data = housing, weights = Freq, family = cumulative(parallel = TRUE))
NPO.mod = vglm(Sat ~ Infl + Type + Cont, data = housing, weights = Freq, family = cumulative(parallel = TRUE))
lrtest(PO.mod, NPO.mod)
plot(Effect("Infl", type.polr))
plot(Effect("Infl", type.polr), style= "stacked", key.args= list(x= .55, y= .9))
plot(Effect(c("Infl","Type"), type.polr))
plot(Effect(c("Infl","Type"), type.polr), style= "stacked", key.args= list(x= .55, y= .9))
plot(Effect(c("Infl","Type"), type.polr))
lrtest(PO.mod, NPO.mod)
PO.mod
PO.mod = vglm(Sat ~ Infl + Type + Cont, data = housing, weights = Freq, family = cumulative(parallel = TRUE))
PO.mod
NPO.mod = vglm(Sat ~ Infl + Type + Cont, data = housing, weights = Freq, family = cumulative(parallel = FALSE))
NPO.mod
lrtest(PO.mod, NPO.mod)
plot(Effect(c("Infl","Type"), type.polr),main = " Effect Plot of influence and type ")
plot(Effect(c("Infl","Type"), type.polr), style= "stacked", key.args= list(x= .55, y= .9),main = " Effect Plot of influence and type ")
#
plot(Effect(c("Infl","Type"), type.polr),main = " Effect Plot of influence and type ")
install.packages("vcd")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("vcdExtra")
install.packages("ca")
install.packages("logmult")
install.packages("MASS")
library(vcd)
library(stats)
library(ggplot2)
library(vcdExtra)
library(gnm)
library(grid)
library(gnm)
library(grid)
library(vcd)
library(stats)
library(ggplot2)
library(vcdExtra)
library(ca)
library(logmult)
library(MASS)
Dayton.ACM <- aggregate(Freq ~ cigarette + alcohol + marijuana, data = DaytonSurvey, FUN = sum)
Dayton.ACM
joint.ind <- aggregate(Freq ~ alcohol*cigarette + marijuana, data = DaytonSurvey, FUN = sum)
joint.ind
Dayton.loglm0 <- loglm(Freq ~ alcohol*cigarette + marijuana, data = DaytonSurvey, param = TRUE, fitted = TRUE)
Dayton.loglm0
#(2) Conditional independence, [AM][CM]:
Dayton.loglm1 <- loglm(Freq ~ marijuana*(cigarette + alcohol), data = DaytonSurvey, param = TRUE, fitted = TRUE)
Dayton.loglm1
#(3) Homogenous model, [AC][AM][CM]:
Dayton.loglm2 <- loglm(Freq ~ (alcohol + cigarette + marijuana)^2, data = DaytonSurvey, param = TRUE, fitted = TRUE)
Dayton.loglm2
#(4) mutual independence, [A][C][M]:
Dayton.loglm3 <- loglm(Freq ~ alcohol + cigarette + marijuana, data = DaytonSurvey, param = TRUE, fitted = TRUE)
Dayton.loglm3
#(5) saturated model, [ACM]:
Dayton.loglm4 <- loglm(Freq ~ alcohol * cigarette * marijuana, data = DaytonSurvey, param = TRUE, fitted = TRUE)
Dayton.loglm4
#Letâ€™s use anova to see which model appears to give the most reasonable fit:
anova(Dayton.loglm0, Dayton.loglm1, Dayton.loglm2, Dayton.loglm3, Dayton.loglm4, test = "Chisq")
install.packages("flexdashboard")
install.packages("knitr")
install.packages("knitr")
install.packages("ggplot2")
install.packages("readxl")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("dplyr")
library(flexdashboard)
library(knitr)
library(ggplot2)
library(readxl)
library(dplyr)
DietRecord <- read.csv("C:/Users/user/Desktop/HU Study/512/Final/deit record final.csv")
p<-ggplot(daily, aes(Date, Steps)) +
geom_point(size=2, shape=16, color="black")+
ggtitle("diet plan 2018/8/22 to 2018/11/6") +
labs(x="Dates", y="Weight(LB)")+
geom_smooth(method=lm)
DietRecord <- read.csv("C:/Users/user/Desktop/HU Study/512/Final/deit record final.csv")
p<-ggplot(DietRecord, aes(Date, LB)) +
geom_point(size=2, shape=16, color="black")+
ggtitle("diet plan 2018/8/22 to 2018/11/6") +
labs(x="Dates", y="Weight(LB)")+
geom_smooth(method=lm)
p
p<-ggplot(data = DietRecord, aes(DietRecord$LB)) +
geom_histogram(col="red",
aes(fill=..count..)) + scale_fill_gradient("Count", low = "yellow", high = "red")
p<-p+ggtitle("diet plan 2018/8/22 to 2018/11/6")+ ylab("Weight")+ xlab("Dates")
p
p<-ggplot(data = DietRecord, aes(DietRecord$exercise)) +
geom_histogram(col="red",
aes(fill=..count..)) + scale_fill_gradient("Count", low = "yellow", high = "red")
p<-p+ggtitle("diet plan 2018/8/22 to 2018/11/6")+ ylab("Weight")+ xlab("Dates")
p
ggplot(data=DietRecord, aes(DietRecord$Fat...)) +
geom_histogram(aes(y =..density..),
breaks=seq(0, 7.5, by = 0.5),
col="black",
fill="navy",
alpha = .2) +
geom_density(col="black") +
labs(title="diet plan 2018/8/22 to 2018/11/6 fat % change") +
labs(x="Fat(%)", y="date")
weightC<-plot(DietRecord$LB, ggtitle("diet plan 2018/8/22 to 2018/11/6") +labs(x="Dates", y="Weight(LB)")+  geom_smooth(method=lm))
weightC
weightC<-plot(DietRecord$LB, title("diet plan 2018/8/22 to 2018/11/6") )
weightC<-DietRecord$LB
weightC
plot(weightC)
plot(weightC,title("diet plan 2018/8/22 to 2018/11/6"))
plot(weightC+title("diet plan 2018/8/22 to 2018/11/6")+ylab("Weight")+ xlab("Dates"))
library(plyr)
mu <- ddply(DietRecord, "monthly", summarise, grp.mean=mean(DietRecord$LB))
DietRecord <- read.csv("C:/Users/user/Desktop/HU Study/512/Final/deit record final.csv")
mu <- ddply(DietRecord, "Month", summarise, grp.mean=mean(DietRecord$LB))
mu <- ddply(DietRecord, "Month", summarise, grp.mean=mean(DietRecord$LB))
p<-ggplot(data=DietRecord, aes(x=LB, color=Seasons, fill=Month)) +
geom_histogram(aes(y=..density..), position="identity", alpha=0.5)+
geom_density(alpha=0.6)+
facet_grid(Month ~ .)+
geom_vline(data=mu, aes(xintercept=grp.mean, color=Seasons),
linetype="dashed")+
theme_classic()
p
mu <- ddply(DietRecord, "Month", summarise, grp.mean=mean(DietRecord$LB))
p4<-ggplot(data=DietRecord, aes(x=LB, color=Seasons, fill=Month)) +
geom_histogram(aes(y=..density..), position="identity", alpha=0.5)+
geom_density(alpha=0.6)+
facet_grid(Month ~ .)+
geom_vline(data=mu, aes(xintercept=grp.mean, color=Month),
linetype="dashed")+
theme_classic()
p4
mu <- ddply(DietRecord, "Month", summarise, grp.mean=mean(DietRecord$LB))
p4<-ggplot(data=DietRecord, aes(x=LB, color=Seasons, fill=Month)) +
geom_histogram(aes(y=..density..), position="identity", alpha=0.5)+
geom_density(alpha=0.6)+
facet_grid(Month ~ .)+
geom_vline(data=mu, aes(xintercept=grp.mean),
linetype="dashed")+
theme_classic()
p4
mu <- ddply(DietRecord, "Month", summarise, grp.mean=mean(DietRecord$LB))
p4<-ggplot(data=DietRecord, aes(x=LB, color=Month, fill=Month)) +
geom_histogram(aes(y=..density..), position="identity", alpha=0.5)+
geom_density(alpha=0.6)+
facet_grid(Month ~ .)+
geom_vline(data=mu, aes(xintercept=grp.mean),
linetype="dashed")+
theme_classic()
p4
DietRecord$Month <- factor(DietRecord$Month)
p5<-ggplot(DietRecord, aes(x=Date, y=exercise, color=Month,shape=Month)) +
geom_point() +
geom_smooth(method=lm)+
ggtitle("diet plan 2018/8/22 to 2018/11/6")+ ylab("Date")+ xlab("exercise (min)")
p5
DietRecord$Month <- factor(DietRecord$Month)
p5<-ggplot(DietRecord, aes(x=Month, y=exercise, color=Month,shape=Month)) +
geom_point() +
geom_smooth(method=lm)+
ggtitle("diet plan 2018/8/22 to 2018/11/6")+ ylab("Month")+ xlab("exercise (min)")
p5
p5<-ggplot(DietRecord, aes(x=Month, y=exercise, color=exercise,shape=exercise)) +
geom_point() +
geom_smooth(method=lm)+
ggtitle("diet plan 2018/8/22 to 2018/11/6")+ ylab("Month")+ xlab("exercise (min)")
p5
p5<-ggplot(DietRecord, aes(x=Month, y=exercise, color=Month,shape=Month)) +
geom_point() +
geom_smooth(method=lm)+
ggtitle("diet plan 2018/8/22 to 2018/11/6")+ ylab("Month")+ xlab("exercise (min)")
p5
#clear workspace
rm(list=ls())
#clear plots
dev.off()
if(!require("ggplot2")){install.packages("ggplot2")}
#See list of all built in datasets
data()
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
summary(ChickWeight)
g = ggplot(ChickWeight,aes(weight,Time))+geom_point()
#Show plot
g
fun1 = function(x) -.5*x + 200
fun2 = function(x) -.2*x + 100
x=seq(0,500)
mydf = data.frame(x, y1=fun1(x), y2=fun2(x))
g = ggplot(mydf, aes(x = x)) +
geom_line(aes(y = y1), colour = 'blue') +
geom_line(aes(y = y2), colour = 'green')
g
g = g + geom_ribbon(aes(ymin=y1, ymax=y2),fill='gray80')
g
x1=c(2,2,3,3)
x2=c(10,8,1,1)
min(x1,x2)
max(x1,x2)
pmin(x1,x2)
pmax(x1,x2)
mydf = transform(mydf, z = pmax(y1,y2))
g = ggplot(mydf, aes(x = x)) +
geom_line(aes(y = y1), colour = 'blue') +
geom_line(aes(y = y2), colour = 'green')+
geom_ribbon(aes(ymin=y1, ymax=z),fill='gray80')
g
#Write constraints in terms of y
fun1 = function(x) -x + 4
fun2 = function(x) -x +2
#Create range of x values
x=seq(0,500)
#Plug x values into constraint functions
mydf = data.frame(x, y1=fun1(x), y2=fun2(x))
#Plot functions
g = ggplot(mydf, aes(x = x)) +
geom_line(aes(y = y1), colour = 'blue') +
geom_line(aes(y = y2), colour = 'green')
g
fun1 = function(x) -x + 4
fun2 = function(x) -x +2
fun1
#Write constraints in terms of y
fun1 = function(x)+ 4-x
#Write constraints in terms of y
fun1 = function(x)+ 4-x
fun2 = function(x) + 2-x
#Create range of x values
x=seq(0,500)
fun1 = function(x)+ 4-x
fun2 = function(x) + 2-x
#Create range of x values
x=seq(0,100)
#Plug x values into constraint functions
mydf = data.frame(x, y1=fun1(x), y2=fun2(x))
#Plot functions
g = ggplot(mydf, aes(x = x)) +
geom_line(aes(y = y1), colour = 'blue') +
geom_line(aes(y = y2), colour = 'green')
g
#Write constraints in terms of y
fun1 = function(x)+ 4-x
fun2 = function(x) + 2-x
#Create range of x values
x=seq(0,10)
#Plug x values into constraint functions
mydf = data.frame(x, y1=fun1(x), y2=fun2(x))
#Plot functions
g = ggplot(mydf, aes(x = x)) +
geom_line(aes(y = y1), colour = 'blue') +
geom_line(aes(y = y2), colour = 'green')
g
#Write constraints in terms of y
fun3 = function(x)+ x-1
fun4 = function(x) + 2-x
#Create range of x values
x=seq(0,10)
#Plug x values into constraint functions
mydf = data.frame(x, y3=fun3(x), y4=fun4(x))
#Plot functions
g2 = ggplot(mydf, aes(x = x)) +
geom_line(aes(y = y3), colour = 'blue') +
geom_line(aes(y = y4), colour = 'pink')
g2
#Write constraints in terms of y
fun3 = function(x)+ x-1
fun4 = function(x) + 2-x
#Create range of x values
x=seq(0,10)
#Plug x values into constraint functions
mydf = data.frame(x, y3=fun3(x), y4=fun4(x))
#Plot functions
g2 = ggplot(mydf, aes(x = x)) +
geom_line(aes(y = y3), colour = 'blue') +
geom_line(aes(y = y4), colour = 'dark')
g2
#Write constraints in terms of y
fun3 = function(x)+ x-1
fun4 = function(x) + 2-x
#Create range of x values
x=seq(0,10)
#Plug x values into constraint functions
mydf = data.frame(x, y3=fun3(x), y4=fun4(x))
#Plot functions
g2 = ggplot(mydf, aes(x = x)) +
geom_line(aes(y = y3), colour = 'blue') +
geom_line(aes(y = y4), colour = 'red')
g2
#Write constraints in terms of y
fun1 = function(x)+ 4-x
fun2 = function(x) + 2-x
#Create range of x values
x=seq(0,10)
#Plug x values into constraint functions
mydf = data.frame(x, y1=fun1(x), y2=fun2(x))
#Plot functions
g = ggplot(mydf, aes(x = x)) +
geom_line(aes(y = y1), colour = 'blue') +
geom_line(aes(y = y2), colour = 'green')
g
#Write constraints in terms of y
fun3 = function(x)+ x-1
fun4 = function(x) + 2-x
#Create range of x values
x=seq(0,10)
#Plug x values into constraint functions
mydf = data.frame(x, y3=fun3(x), y4=fun4(x))
#Plot functions
g2 = ggplot(mydf, aes(x = x)) +
geom_line(aes(y = y3), colour = 'blue') +
geom_line(aes(y = y4), colour = 'red')
g2
install.packages("lpSolveAPI")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library("lpSolveAPI")
library("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library("lpSolveAPI")
library("dplyr")
x=5
x
```{r}
```{r}
The X value is equal `r x`
```{r}
```{r}
x=5
```
The x value is equal `r x`
```{r}
WeatherP <-read_excel("/Users/user/Desktop/HU Study/695/13/LastExecise/income/Rincome.csv")
WeatherP <-read_excel("/Users/user/Desktop/HU Study/695/13/LastExecise/income/income.csv")
MyData <- read.csv(file="income.csv", header=TRUE, sep=",")
MyData <- read.csv(file="income.csv", header=TRUE)
install.packages(reader)
library(reader)
setwd("C:/Users/user/Desktop/HU Study/695/13/LastExecise/income")
library(readr)
income <- read_csv("income.csv")
View(income)
View(income)
library(readr)
income <- read_csv("income.csv")
View(income)
hist(income$M_weekly)
hist(income$M_weekly)
library(ggplot2)
library(ggplot)
hist(income$F_workers)
hist(income$F_workers,labels = F_workers)
hist(income$M_weekly,labels = 'M_weekly')
par(mfrow=(2,2))
hist(income$M_weekly,labels = 'M_weekly')
hist(income$F_workers,labels = 'F_workers')
hist(income$M_weekly,labels = 'M_weekly')
hist(income$F_workers,labels = 'F_workers')
par(mfrow=(2,2))
hist(income$M_weekly,labels = 'M_weekly')
hist(income$F_workers,labels = 'F_workers')
hist(income$M_weekly,labels = 'M_weekly')
hist(income$F_workers,labels = 'F_workers')
par(mfrow=c(2,2))
hist(income$M_weekly,labels = 'M_weekly')
hist(income$F_workers,labels = 'F_workers')
hist(income$M_weekly,labels = 'M_weekly')
hist(income$F_workers,labels = 'F_workers')
model= lm(Industry, data=income)
model= lm(income$Industry, data=income)
model= lm(income$M_workers~income$Industry, data=income)
summary(model)
anova(model)
plot(fitted(model),residuals(model))
